apiVersion: admissionregistration.k8s.io/v1alpha1
kind: ValidatingAdmissionPolicy
metadata:
  name: "kubescape-c-0013-deny-resources-with-capability-to-run-as-root"
spec:
  failurePolicy: Fail
  matchConstraints:
    resourceRules:
    - apiGroups:   [""]
      apiVersions: ["v1"]
      operations:  ["CREATE", "UPDATE"]
      resources:   ["pods"]
    - apiGroups:   ["apps"]
      apiVersions: ["v1"]
      operations:  ["CREATE", "UPDATE"]
      resources:   ["deployments","replicasets","daemonsets","statefulsets"]
    - apiGroups:   ["batch"]
      apiVersions: ["v1"]
      operations:  ["CREATE", "UPDATE"]
      resources:   ["jobs","cronjobs"]
  validations:
    - expression: > 
        object.kind != 'Pod' || (object.spec.containers.all(container, has(container.securityContext) && has(container.securityContext.allowPrivilegeEscalation) && container.securityContext.allowPrivilegeEscalation == false)) && (
          (has(object.spec.securityContext) && (
            (has(object.spec.securityContext.runAsNonRoot) && object.spec.securityContext.runAsNonRoot == true) ||
            (has(object.spec.securityContext.runAsUser) && object.spec.securityContext.runAsUser != 0)
          )) || (
            object.spec.containers.all(container, has(container.securityContext) && (
              (has(container.securityContext.runAsNonRoot) && container.securityContext.runAsNonRoot == true) ||
              (has(container.securityContext.runAsUser) && container.securityContext.runAsUser != 0)
            ))
          )
        )
      message: "Pods contains container/s which have the capability to run as root! (see more at https://hub.armosec.io/docs/c-0013)"

    - expression: >
        ['Deployment','ReplicaSet','DaemonSet','StatefulSet','Job'].all(kind, object.kind != kind) || (object.spec.template.spec.containers.all(container, has(container.securityContext) && has(container.securityContext.allowPrivilegeEscalation) && container.securityContext.allowPrivilegeEscalation == false)) && (
          (has(object.spec.template.spec.securityContext) && (
            (has(object.spec.template.spec.securityContext.runAsNonRoot) && object.spec.template.spec.securityContext.runAsNonRoot == true) ||
            (has(object.spec.template.spec.securityContext.runAsUser) && object.spec.template.spec.securityContext.runAsUser != 0)
          )) || (
            object.spec.template.spec.containers.all(container, has(container.securityContext) && (
              (has(container.securityContext.runAsNonRoot) && container.securityContext.runAsNonRoot == true) ||
              (has(container.securityContext.runAsUser) && container.securityContext.runAsUser != 0)
            ))
          )
        )
      message: "Workloads contains container/s which have the capability to run as root! (see more at https://hub.armosec.io/docs/c-0013)"

    - expression: >
        object.kind != 'CronJob' || (object.spec.jobTemplate.spec.containers.all(container, has(container.securityContext) && has(container.securityContext.allowPrivilegeEscalation) && container.securityContext.allowPrivilegeEscalation == false)) && (
          (has(object.spec.jobTemplate.spec.securityContext) && (
            (has(object.spec.jobTemplate.spec.securityContext.runAsNonRoot) && object.spec.jobTemplate.spec.securityContext.runAsNonRoot == true) ||
            (has(object.spec.jobTemplate.spec.securityContext.runAsUser) && object.spec.jobTemplate.spec.securityContext.runAsUser != 0)
          )) || (
            object.spec.jobTemplate.spec.containers.all(container, has(container.securityContext) && (
              (has(container.securityContext.runAsNonRoot) && container.securityContext.runAsNonRoot == true) ||
              (has(container.securityContext.runAsUser) && container.securityContext.runAsUser != 0)
            ))
          )
        )
      message: "CronJob contains container/s which have the capability to run as root! (see more at https://hub.armosec.io/docs/c-0013)"