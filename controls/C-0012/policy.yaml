apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingAdmissionPolicy
metadata:
  name: "kubescape-c-0012-deny-resources-with-sensitive-information-in-environment-variables"
spec:
  failurePolicy: Fail
  paramKind:
    apiVersion: kubescape.io/v1
    kind: ControlConfiguration
  matchConstraints:
    resourceRules:
    - apiGroups:   [""]
      apiVersions: ["v1"]
      operations:  ["CREATE", "UPDATE"]
      resources:   ["pods"]
    - apiGroups:   ["apps"]
      apiVersions: ["v1"]
      operations:  ["CREATE", "UPDATE"]
      resources:   ["deployments","replicasets","daemonsets","statefulsets"]
    - apiGroups:   ["batch"]
      apiVersions: ["v1"]
      operations:  ["CREATE", "UPDATE"]
      resources:   ["jobs","cronjobs"]
    - apiGroups:   [""]
      apiVersions: ["v1"]
      operations:  ["CREATE", "UPDATE"]
      resources:   ["configmaps"]
  variables:
    - expression: |
        object.kind == 'Pod' ? object.spec.containers
        : object.kind in ['Deployment','ReplicaSet','DaemonSet','StatefulSet','Job'] ? object.spec.template.spec.containers
        : object.kind == 'CronJob' ? object.spec.jobTemplate.spec.template.spec.containers
        : []
      name: containers
    - expression: |
        object.kind == 'ConfigMap' ?
          (has(object.data) ?
            object.data
            : (has(object.binaryData) ?
              object.binaryData
              : {}))
        : {}
      name: configMapData
  validations:
    # Note that if the value is mounted using a secret or a configMap, this policy will allow the resource to be deployed in the cluster.
    - expression: |
        variables.containers.all(container,
          !has(container.env) || container.env.all(envVariable,
            (
                !params.settings.sensitiveKeyNames.exists(sensitiveKey, envVariable.name.lowerAscii().contains(sensitiveKey)) &&
                !params.settings.sensitiveValues.exists(sensitiveVal, envVariable.value.matches(sensitiveVal))
            ) ||
            !has(envVariable.value) || (envVariable.value == "") ||
            envVariable.value in params.settings.sensitiveValuesAllowed ||
            params.settings.sensitiveKeyNamesAllowed.exists(sensitiveKeyName, envVariable.name.matches(sensitiveKeyName))
          )
        )
      reason: Invalid
      messageExpression: 'object.kind + "/" + object.metadata.name + " has one or more containers with sensitive information in environment variables! (see more at https://hub.armosec.io/docs/c-0012)"'
    - expression: >
        variables.configMapData.all(key,
        (
          (
            !params.settings.sensitiveKeyNames.exists(sensitiveKey, key.lowerAscii().contains(sensitiveKey)) &&
            !params.settings.sensitiveValues.exists(sensitiveVal, key.lowerAscii().matches(sensitiveVal))
          ) ||
          variables.configMapData[key] == "" ||
          variables.configMapData[key] in params.settings.sensitiveValuesAllowed ||
          params.settings.sensitiveKeyNamesAllowed.exists(sensitiveKeyName, key.matches(sensitiveKeyName))
        ))
      messageExpression: 'object.kind + "/" + object.metadata.name + " contains sensitive information in its data! (see more at https://hub.armosec.io/docs/c-0012)"'
